# 设计一个截然不同的游戏，换种游戏风格

# 思路扩展

# 要求
# 1.尽量使用所学到的知识
# 2.使用多个文件进行游戏逻辑的拆分，并用 import 导入它们
# 3.对每个模块都起一个有意义的名称
# 4.设计合理的游戏逻辑，并实现它



# 总结

# 函数的风格
# 1.函数命名要简短有意义
# 2.函数要保持简单小巧，尽量完成单一功能

# 类的风格
# 1.使用驼峰命名法命名函数名称
# 2.__init__ 不应该做太多事情，这样会让 class 变得难以使用
# 3.其他函数应该使用下划线隔词，如：my_car
# 4.用一致的方式组织函数的参数，如：有两个参数，cars, users 一个方法（cars, users）另一个（users, cars）这样会使函数很难使用
# 5.不要对全局变量或者来自模组的变量进行重定义或者赋值
# 6.要一直使用 class Name(object) 的方式定义 class 

# 代码风格
# 1.为了方便阅读，添加适当的空白
# 2.尽量保持好的代码风格习惯
# 3.模仿别人好的代码风格

# 好的注释
# 1.为了提高代码的可读性，添加注释是必要的
# 2.注释尽量写上这样实现的原因
# 3.尽量保持注解的精简，不要太多的注解

